#!/bin/zsh

# $HOME/.zsh/functions
# vim: fdm=marker ts=4 sw=4

# extract {{{1
function extract() {
    local old_dirs current_dirs lower
    old_dirs=( *(N/) )
    unset REMOVE_ARCHIVE
    
    if test "$1" = "-r"; then
        REMOVE_ARCHIVE=1
        shift
    fi

    if [[ -f $1 ]]; then
        lower=${(L)1}
        case $lower in
            *.tar.bz2) tar xvjf $1;;
            *.tar.gz) tar xvzf $1;;
            *.tar.xz) tar xvJf $1;;
            *.tar.lzma) tar --lzma -xvf $1;;
            *.bz2) bunzip $1;;
            *.rar) unrar x $1;;
            *.gz) gunzip $1;;
            *.tar) tar xvf $1;;
            *.tbz2) tar xvjf $1;;
            *.tgz) tar xvzf $1;;
            *.zip) unzip $1;;
            *.Z) uncompress $1;;
            *.7z) 7z x $1;;
            *) echo "'$1' cannot be extracted via >extract<"; return 1;;
        esac

        if [[ $REMOVE_ARCHIVE -eq 1 && $? -eq 0 ]]; then
            echo removing "$1";
            /bin/rm "$1";
        fi

    else
        echo "'$1' is not a valid file"
    fi

    # Change in to the newly created directory, and
    # list the directory contents, if there is one.
    current_dirs=( *(N/) )
    for i in {1..${#current_dirs}}; do
        if [[ $current_dirs[$i] != $old_dirs[$i] ]]; then
            cd $current_dirs[$i]
            break
        fi
    done
}

# roll {{{1
function roll () {
    FILE=$1
    case $FILE in
        *.tar.bz2) shift && tar cjf $FILE $* ;;
        *.tar.gz) shift && tar czf $FILE $* ;;
        *.tgz) shift && tar czf $FILE $* ;;
        *.tar) shift && tar cf $FILE $* ;;
        *.zip) shift && zip $FILE -r $* ;;
        *.7z) shift && 7z a $FILE $* ;;
    esac
}

# udevinfo {{{1
function udevinfo () {
    DPATH=$(udevadm info -q path -n $1)
    udevadm info -a -p $DPATH
}

# mkcd {{{1
# Create and CD into directory.
function mkcd {
    if [ $# -ne 1 ]; then
        echo "usage: mkcd directory_name"
    elif [ -d "${1}" ]; then
        echo "(directory already exists)"
        cd "$1"
    elif [ -e "${1}" ]; then
        echo "file exists"
    else
        mkdir "${1}" && cd "${1}"
    fi
}

# psgrep {{{1
function psgrep () { ps ax | grep $1 | grep -v grep; }

# genpasswd {{{1
function genpasswd() {
    local l=$1
    tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${1:-20} | xargs
}

# debug {{{1
function shdebug() { env PS4=' ${BASH_SOURCE}:${LINENO}(${FUNCNAME[0]}) ' sh -x $*; }
function bashdebug() { env PS4=' ${BASH_SOURCE}:${LINENO}(${FUNCNAME[0]}) ' bash -x $*; }

# youtubeConvert {{{1
function youtubeConvert() {
    ffmpeg -i $1 -c:v libx264 -crf 18 -preset slow -pix_fmt yuv420p -c:a copy ${1%.*}\ \(youtube\ ready\).mkv
}

# flac2mp3 {{{1
function flac2mp3() {
    [[ $1 = "-d" ]] && DEL=1 && shift
    for i in "$@"; do

        TART=$(metaflac --show-tag=ARTIST $i)
        TTIT=$(metaflac --show-tag=TITLE $i)
        TYR=$(metaflac --show-tag=DATE $i)
        TALB=$(metaflac --show-tag=ALBUM $i)
        TGNR=$(metaflac --show-tag=GENRE $i)
        TTNR=$(metaflac --show-tag=TRACKNUMBER $i)

        flac -c -d "$i" | lame --noreplaygain --cbr -m s -h -b 320 \
        --add-id3v2 --pad-id3v2 --ignore-tag-errors \
        --tt "${TTIT#*=}" \
        --tn "${TTNR#*=}" \
        --ta "${TART#*=}" \
        --tl "${TALB#*=}" \
        --ty "${TYR#*=}" \
        --tg "${TGNR#*=}" \
        - "${i/.flac/.mp3}" && \
        [[ $DEL == 1 ]] && rm "$i"
    done
}

# filename2tag {{{1
function filename2tag() {
    for file in "$@"; do
        ALBUM=$(sed 's/\(\[.*\] \)\?\(.*\)\( - \)\(.*\)\([[(][12][09][0-9][0-9][])]\)/\4/' <<<"${PWD##*/}")
        ALBUM="${ALBUM% }"
        ALBUM="${ALBUM% \[[0-9A-Z]*\]}"
        YEAR=$(grep -oP '(?<=[\[\(])[12][09][0-9]{2}(?=[\]\)])' <<<"${PWD##*/}")
        ARTIST=$(sed 's/^\([0-9]*\ \)\?\(.*\)\( - \)\(.*\)\(\..*$\)/\2/' <<<"$file")
        TITLE=$(sed 's/^\([0-9]*\ \)\?\(.*\)\( - \)\(.*\)\(\..*$\)/\4/' <<<"$file")
        
        echo -e "album:\t$ALBUM"
        echo -e "year:\t$YEAR"
        echo -e "file:\t${file%.*}"
        echo -e "artist:\t$ARTIST"
        echo -e "title:\t$TITLE"
    
        case $file in
            *.mp3)
                id3tag --artist="$ARTIST" --song="$TITLE" --album="$ALBUM" --year="$YEAR" "$file"
            ;;
            *.flac)
                flac -T ARTIST="$ARTIST" TITLE="$TITLE" ALBUM="$ALBUM" DATE="$YEAR" "$file"
            ;;
        esac
    done
}

# tag2filename {{{1
function tag2filename() {
    for file in "$@"; do
        case $file in
            *.mp3)
                FILENAME=$(basename "$file")
                ARTIST=`/usr/bin/mutagen-inspect "$file" | grep TPE1`
                TITLE=`/usr/bin/mutagen-inspect "$file" | grep TIT2`
                NR=`/usr/bin/mutagen-inspect "$file" | grep TRCK`
                /bin/mv -v "$file" "${NR%%/*} ${ARTIST#*=} - ${TITLE#*=}${file##*.}"
            ;;
            *.flac)
                ARTIST=$(metaflac --show-tag=ARTIST $file)
                TITLE=$(metaflac --show-tag=TITLE $file)
                YEAR=$(metaflac --show-tag=DATE $file)
                ALBUM=$(metaflac --show-tag=ALBUM $file)
                NR=$(metaflac --show-tag=TRACKNUMBER $file)
                echo
                echo -e "file:\t$file"
                echo -e "artist:\t${ARTIST#*=}"
                echo -e "title:\t${TITLE#*=}"
                echo
                /bin/mv -v "$file" "`printf '%02d' ${NR#*=}` ${ARTIST#*=} - ${TITLE#*=}.${file##*.}"
                
            ;;
        esac
    done
}

# pd {{{1
function pd() {
    LINKS=${1:-/tmp/list.txt}
    plowdown --skip-final --run-after ~/files/scripts/ariaplow.sh "$LINKS"
}

# gt {{{1
# google translation - usage example: gt de steamboat
function gt() {
    to="${1}";
    text=$(echo "${*}" | sed -e "s/^.. //" -e "s/[\"'<>]//g");
    res=$(wget -U "Mozilla/5.0" -qO - "http://translate.google.com/translate_a/t?client=t&text=${text}&sl=auto&tl=${to}" | sed 's/\[\[\[\"//' | cut -d \" -f 1);
    echo "${res}";
}

# rzmv {{{1
# recursive translation of space characters to underscore
function rzmv() { zmv '(**/)(*)' '$1${2// /_}' }

# bam {{{1
# backup with move
function bam() {
  for file; do
    mv -v $file{,.bkp}
  done
}

# bum {{{1
# undo backup move
function bum() {
  for file; do
    mv -v "$file" "${file%.bkp}"
  done
}

# bac {{{1
# backup with copy
function bac() {
  for file; do
    cp -Rpv "$file" "$file~$(date -Ins)~"
  done
}

# buc {{{1
# undo backup copy
function buc() {
  for file; do
    dest=${file%%\~*}
    test -d "$dest" && mv -v "$dest" "$file.orig"
    mv -v "$file" "$dest"
  done
}

# ffind {{{1
# Find a file with a pattern in name:
function ffind()
{
    for arg in "$@"
    do
        find . -iname '*'${arg}'*' | grep -i --color $arg
    done
}

# fiexec {{{1
# Find a file with pattern $1 in name and Execute $2 on it:
function fiexec() { find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ; }

# fstr {{{1
# Find a pattern in a set of files and highlight them:
# (needs a recent version of egrep)
function fstr()
{
    OPTIND=1
    local case=""
    local usage="fstr: find string in files.\nUsage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
        i) case="-i " ;;
        *) echo "$usage"; return;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if [ "$#" -lt 1 ]; then
        echo "$usage"
        return;
    fi
    find . -type f -name "${2:-*}" -print0 | \
    xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more

}

# swapfiles {{{1
# Swap 2 filenames around, if they exist
function swapfiles()
{
    local TMPFILE=tmp.$$

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# lowercase {{{1
# move filenames to lowercase
function lowercase()
{
    for file ; do
        filename=${file##*/}
        case "$filename" in
        */*) dirname==${file%/*} ;;
        *) dirname=.;;
        esac
        nf=$(echo $filename | tr A-Z a-z)
        newname="${dirname}/${nf}"
        if [ "$nf" != "$filename" ]; then
            mv "$file" "$newname"
            echo "lowercase: $file --> $newname"
        else
            echo "lowercase: $file not changed."
        fi
    done
}

# git_prompt {{{1
function git_prompt_branch() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo "$ZSH_THEME_GIT_PROMPT_PREFIX ${ref#refs/heads/}"
}

function git_prompt_status() {
    INDEX=$(git status --porcelain 2> /dev/null)
    STATUS=""
    if $(echo "$INDEX" | grep '^?? ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_UNTRACKED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^A ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
    elif $(echo "$INDEX" | grep '^M ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^ M ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
    elif $(echo "$INDEX" | grep '^AM ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
    elif $(echo "$INDEX" | grep '^ T ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^R ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_RENAMED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^ D ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^UU ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_UNMERGED$STATUS"
    fi
    echo $STATUS
}

# prompt {{{1
function setprompt() {
    autoload -U colors zsh/terminfo
    colors
    setopt prompt_subst
 
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
        eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
        eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
    done

    PR_NO_COLOR="%{$terminfo[sgr0]%}"
    PR_USER="%n"

    ZSH_THEME_GIT_PROMPT_PREFIX="${PR_RED}"
    #ZSH_THEME_GIT_PROMPT_PREFIX="${PR_BLUE}git:${PR_RED}"
    ZSH_THEME_GIT_PROMPT_SUFFIX="${PR_NO_COLOR}"
    ZSH_THEME_GIT_PROMPT_DIRTY="${PR_BLUE} ${PR_YELLOW}*${PR_NO_COLOR}"
    ZSH_THEME_GIT_PROMPT_CLEAN="${PR_BLUE}"
 
    ZSH_THEME_GIT_PROMPT_ADDED="${PR_GREEN} +"
    ZSH_THEME_GIT_PROMPT_MODIFIED="${PR_BLUE} M"
    ZSH_THEME_GIT_PROMPT_DELETED="${PR_RED} D"
    ZSH_THEME_GIT_PROMPT_RENAMED="${PR_MAGENTA} R"
    ZSH_THEME_GIT_PROMPT_UNMERGED="${PR_YELLOW} ═"
    ZSH_THEME_GIT_PROMPT_UNTRACKED="${PR_CYAN} -"

    #VIMODE="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --}"

    PROMPT=$'${PR_GREEN}${PR_USER}${PR_NO_COLOR} ${PR_WHITE}%~${PR_NO_COLOR} ${PR_MAGENTA}%(!.#.») ${PR_NO_COLOR} '
    RPS1='${PR_MAGENTA}« ${PR_YELLOW}[${PR_NO_COLOR}%?${PR_YELLOW}]${PR_NO_COLOR}$(git_prompt_branch)$(git_prompt_status)$ZSH_THEME_GIT_PROMPT_SUFFIX'
}
 
# bookmark {{{1
# Add current path to bookmarks file
function bookmark() {

    ZDOTDIR="$HOME/.config/zsh"
    bmark_file=${ZDOTDIR}/bookmarks
    bmark_file=${ZDOTDIR}/bookmarks
    bmark_path="$PWD"
    del=0; [[ "$1" == "-d" ]] && shift && del=1
    bmark_id="$1"
    [[ -z $bmark_id ]] && echo "usage: $0 [-d] ID" && return
    [[ ! -e $bmark_file ]] && touch $bmark_file

    # delete bookmarks by ID
    if [[ $del == 1 ]]; then
        if [[ $(grep -E "\|${bmark_id}$" $bmark_file) ]] ; then
            #TODO: proper expression
            sed -i "/|${bmark_id}$/d" $bmark_file && return
        else
            echo "Cannot find bookmark with given ID."; return 1
        fi
    fi

    # check if directory is already bookmarked
    while read -r line; do
        grep -qE "$(realpath $bmark_path)" <<<$(realpath ${line%%|*}) && \
        echo "Path or respective symlink is already bookmarked with ID \"${line##*|}\"." && \
        return 1
    done <$ZDOTDIR/bookmarks

    if (( ${#bmark_id} > 20 )); then
        echo "Please choose an ID with a length <= 20."; return 1
    elif [[ $(grep -E "\|${bmark_id}$" $bmark_file) ]]; then
        echo "ID already in use. Please choose another name."; return 1
    elif [[ ! $(grep -E '^[A-Za-z0-9_.][A-Za-z0-9_-.]*$' <<<$bmark_id) ]]; then
        echo "Invalid ID given. Valid characters are: A-Z a-z 0-9 _ - ."
        echo "In addition make sure not to start your ID with a hyphen."
        return 1
    else
        echo "${bmark_path}|$bmark_id" >> $bmark_file
    fi
}
# fzf {{{1
if [[ $- =~ i ]]; then
    # Paste the selected entry from locate output into the command line
    function fzf-locate-widget() {
        local selected
        if selected=$(locate / | $(__fzfcmd) -q "$LBUFFER"); then
            LBUFFER=$selected
        fi
        zle redisplay
    }
    zle -N fzf-locate-widget

    # Change to bookmarked folder
    function fzf-cd-bookmark() {
        padchar=" "
        pad=$(printf '%0.1s' "$padchar"{1..33})
        padlength=22

        dest_dir=$(
            while read line; do
                bmark_id="${line//*|}"
                bmark_path="${line%%|*}"
                printf '%s' "$bmark_id"
                printf '%*.*s' 0 $((padlength - ${#bmark_id} )) "$pad"
                printf '%s\n' "$bmark_path"
                bmark_path=${bmark_path:1}
            done <${ZDOTDIR}/bookmarks | $(__fzfcmd) -d12 -e)

        dest_dir=$(echo $dest_dir | sed -e 's/^\w*\ *//g')
        if [[ -n $dest_dir ]]; then
            cd "$dest_dir"
        fi

        zle redisplay
        zle reset-prompt
    }
    zle -N fzf-cd-bookmark

    # Paste the selected command from history into the command line
    function fzf-history() {
        local selected restore_no_bang_hist
        if selected=( $(fc -l 1 | $(__fzfcmd) -e +s --tac +m -n2..,.. --tiebreak=index --toggle-sort=ctrl-r -q "$LBUFFER") ); then
            num=$selected[1]
            if [ -n "$num" ]; then
                zle vi-fetch-history -n $num
            fi
        fi
        zle redisplay
    }
    zle -N fzf-history
fi

