# vim: set filetype=gitconfig ts=2 sts=2 sw=2 et:

[color] # {{{
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta
  plain = white bold
  old = red bold
  new = green bold
  commit = yellow bold
  func = green dim
  #plain = white bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan
# }}}

[alias] # {{{
  # Abbreviations
  br = branch
  branches = branch -a -vv
  cb = checkout -b
  ci = commit
  co = checkout
  dt = difftool
  st = status -sb
  stashes = stash list
  tags = tag

  # Display all configured aliases
  alias = config --get-regexp ^alias\\.

  # Amend to previous commit
  amend = commit --amend

  # Fix your last commit without prompting an editor
  oops = commit --all --amend --no-edit

  # Discard unstaged changes made to a file
  discard = checkout --

  # Unstage staged hunks or files
  unstage = reset -q HEAD --

  # Uncommit and unstage files
  uncommit = reset --mixed HEAD~

  # Pretty log output
  # hs = log --abbrev-commit --graph --branches --remotes --date=short --max-count=30 --pretty=format:'%C(yellow)%h%Creset %C(bold magenta)%ad%Creset â€¢ %<(75,trunc)%s %Cgreen(%cr) %C(bold blue)<%an>%Creset%Cred%d%Creset'
  hs = log --abbrev-commit --graph --date=short --max-count=30 --pretty=format:'%C(yellow)%h%Creset %C(bold magenta)%ad%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%Cred%d%Creset'
  hsa = log --abbrev-commit --graph --date=short --max-count=30 --pretty=format:'%C(yellow)%h%Creset %C(bold magenta)%ad%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%Cred%d%Creset' --all
  hst = log --abbrev-commit --graph --date=short --pretty=format:'%C(yellow)%h%Creset %C(bold magenta)%ad%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%Cred%d%Creset'

  # Print the last commit title & hash
  last = --no-pager log -1 --oneline --color

  # Print the type of a git object
  type = cat-file -t

  # Print the metadata of a git object
  dump = cat-file -p

  precommit = diff --cached --diff-algorithm=minimal -w

  # Add a file/directory to your .gitignore
  ignore = "!f() { echo /${GIT_PREFIX}${1} >> \"$(git rev-parse --show-toplevel)/.gitignore\"; }; f"

  # Open all modified files in Vim
  edit = "!f() { vim $(git status -s | awk '{ print $2 }'); }; f"

  # Rewrite stash description
  # Usage: git stash-rename <stash> [save options] [<message>]
  stash-rename = "!f() { rev=$(git rev-parse $1) && git stash drop $1 || exit 1 ; git stash store -m \"$2\" $rev; }; f"
# }}}

[url "https://aur.archlinux.org/"]
  insteadOf = aur://

[url "ssh+git://aur@aur.archlinux.org/"]
  insteadOf = "aur:"

[url "https://github.com/"]
  insteadOf = "gh:"

[url "git@github.com:"]
  pushInsteadOf = "gh:"

[status]
  relativePaths = true
  showUntrackedFiles = no

[core]
  editor = vim

[merge]
  tool = vimdiff
  conflictstyle = merge

[diff]
  tool = vimdiff
  noprefix = true
  algorithm = patience
  renames = copies

#[pager]
#  diff = "vim -c '%sm/\\e.\\{-}m//ge' -c 'set ft=diff' -c 'normal gg' -"

[pull]
  rebase = true

[push]
  default = simple

[difftool]
  prompt = false

[include]
  path = ~/.gitconfig.local

